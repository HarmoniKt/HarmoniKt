services:
  proxy:
    image: caddy:2.10-alpine
    ports:
      - "80:80"
    volumes:
      - ./proxy/Caddyfile:/etc/caddy/Caddyfile
    restart: unless-stopped
    depends_on:
      consul:
        condition: service_healthy
      robot-manager:
        condition: service_healthy
      group-mission-manager:
        condition: service_healthy
      map-manager:
        condition: service_healthy
      spot-service:
        condition: service_healthy
      mir-service:
        condition: service_healthy

  consul:
    image: consul:1.15
    ports:
      - "8500:8500"  # UI and API - Only for development purposes
      - "8600:8600/udp"  # DNS
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 10s
      timeout: 5s
      retries: 5

  robot-manager:
    build:
      context: .
      dockerfile: robot-manager/Dockerfile
    # Only for development purposes
    ports:
      - "8081:8080"
    environment:
      - CONSUL_URL=http://consul:8500
      - MOCKED=true
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 5

  group-mission-manager:
    build:
      context: .
      dockerfile: group-mission-manager/Dockerfile
    # Only for development purposes
    ports:
      - "8082:8080"
    environment:
      - CONSUL_URL=http://consul:8500
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 5

  map-manager:
    build:
      context: .
      dockerfile: map-manager/Dockerfile
    # Only for development purposes
    ports:
      - "8083:8080"
    environment:
      - CONSUL_URL=http://consul:8500
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 5

  spot-service:
    build:
      context: spot-service
      dockerfile: Dockerfile
    # Only for development purposes
    ports:
      - "8084:8000"
    environment:
      - CONSUL_URL=http://consul:8500
      - MOCKED=true
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 5s
      retries: 5

  mir-service:
    build:
      context: .
      dockerfile: mir-service/Dockerfile
    # Only for development purposes
    ports:
      - "8085:8080"
    environment:
      - CONSUL_URL=http://consul:8500
    depends_on:
      consul:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  default:
    name: harmonikt-network
